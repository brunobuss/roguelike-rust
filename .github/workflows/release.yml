name: Release

on:
  workflow_dispatch:
    inputs:
      versiontag:
        description: "Version tag to be used (e.g. vX.Y.Z)"
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

defaults:
  run:
    shell: bash

jobs:
  build:
    name: ${{ matrix.build }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        build: [Linux, macOS, Win64]       
        include:
          - build: Linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin: target/x86_64-unknown-linux-gnu/release/dungeoncrawl
          - build: macOS
            os: macOS-latest
            target: x86_64-apple-darwin
            bin: target/x86_64-apple-darwin/release/dungeoncrawl
          - build: Win64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: target/x86_64-pc-windows-msvc/release/dungeoncrawl.exe

    env:
      RELEASE_NAME: dungeoncrawl-${{ inputs.versiontag }}-${{ matrix.build }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        profile: minimal
        override: true

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --target ${{ matrix.target }}

    - run: mkdir "$RELEASE_NAME"
    - run: cp ${{ matrix.bin }} "$RELEASE_NAME"
    - run: cp -r resources "$RELEASE_NAME"
    - run: cp README.md "$RELEASE_NAME"

    - name: Compress to .zip
      if: ${{ matrix.build == 'Win64' }}
      run: 7z a "${{ env.RELEASE_NAME }}.zip" "$RELEASE_NAME"

    - name: Compress to .tar.gz
      if: ${{ matrix.build != 'Win64' }}
      run: tar czvf "${{ env.RELEASE_NAME }}.tar.gz" "$RELEASE_NAME"

    - uses: actions/upload-artifact@v3
      with:
        name: dungeoncrawl-${{ inputs.versiontag }}-${{ matrix.build }}
        path: |
          dungeoncrawl*.zip
          dungeoncrawl*.tar.gz
